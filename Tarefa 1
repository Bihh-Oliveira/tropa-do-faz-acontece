import re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Função de pré-processamento
def limpar_texto(texto):
    texto = texto.lower()
    texto = re.sub(r'[^\w\s]', '', texto)
    texto = re.sub(r'\d+', '', texto)
    texto = texto.strip()
    return texto

# Dados de treinamento simplificados
mensagens = [
    "Quero fazer um pedido",
    "Preciso falar com o suporte",
    "Quais promoções vocês têm?",
    "Qual o horário de funcionamento?",
    "Meu pedido veio com defeito",
    "Posso pagar com cartão?",
    "O pedido ainda não chegou",
    "Gostaria de mudar o endereço",
    "Não consigo entrar na minha conta",
    "Qual o valor do frete?",
    "Pix",
    "Cupom"
]

rotulos = [
    "pedido",
    "suporte",
    "promoção",
    "informação",
    "suporte",
    "pagamento",
    "suporte",
    "pedido",
    "suporte",
    "informação",
    "pagamento",
    "promoção"
]

# 2. Pré-processamento das mensagens
mensagens_limpas = [limpar_texto(m) for m in mensagens]

# 3. Vetorização
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(mensagens_limpas)

# 4. Treinamento do modelo
modelo = MultinomialNB()
modelo.fit(X, rotulos)

# 5. Interação com o usuário
while True:
    nova_mensagem = input("\nDigite uma mensagem (ou 'sair' para encerrar): ")
    if nova_mensagem.lower() == "sair":
        break
    nova_mensagem_limpa = limpar_texto(nova_mensagem)
    X_novo = vectorizer.transform([nova_mensagem_limpa])
    predicao = modelo.predict(X_novo)
    print(f"Intenção prevista: {predicao[0]}")
